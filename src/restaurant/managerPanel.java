/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * managerPanel.java
 *
 * Created on Mar 15, 2010, 3:11:34 AM
 */

package restaurant;
import java.security.*;
import java.math.*;
import java.lang.*;
import javax.swing.*;
import java.sql.*;
import java.util.*;
/**
 *
 * @author Owner
 */
public class managerPanel extends javax.swing.JPanel {
    /** Creates new form managerPanel */
    public managerPanel() {
        initComponents();
        employeeReportDisplay.setEditable(false);employeeReportDisplay.setLineWrap(true);
        foodReportDisplay.setEditable(false);foodReportDisplay.setLineWrap(true);
        positionChoice.setEditable(false);addCategory.setEditable(false);editCategory.setEditable(false);
        addEmployeeInfo.setEditable(false);removeEmployeeInfo.setEditable(false);
        addEmployeeInfo.setLineWrap(true);removeEmployeeInfo.setLineWrap(true);
        addFoodInfo.setEditable(false);editFoodInfo.setEditable(false);removeFoodInfo.setEditable(false);
        addFoodInfo.setLineWrap(true); editFoodInfo.setLineWrap(true); removeFoodInfo.setLineWrap(true);
        editFoodDescription.setLineWrap(true);addFoodDescription.setLineWrap(true);
        editCategory.setEnabled(false); editFoodPrice.setEnabled(false); editFoodDescription.setEnabled(false);
        editTimeToCook.setEnabled(false);availability.setEnabled(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        managerLabel = new javax.swing.JLabel();
        logoutButton = new javax.swing.JButton();
        managerTabPane = new javax.swing.JTabbedPane();
        removeEmpPanel = new javax.swing.JPanel();
        removeEmpLabel = new javax.swing.JLabel();
        removeFirstNameLabel = new javax.swing.JLabel();
        removeEmployeeFName = new javax.swing.JTextField();
        removeLastNameLabel = new javax.swing.JLabel();
        removeEmployeeLName = new javax.swing.JTextField();
        removeEmployeePane = new javax.swing.JScrollPane();
        removeEmployeeInfo = new javax.swing.JTextArea();
        clearRemoveEmpButton = new javax.swing.JButton();
        okRemoveEmpButton = new javax.swing.JButton();
        removeEmpErrorLabel = new javax.swing.JLabel();
        employeeReportPanel = new javax.swing.JPanel();
        erLabel = new javax.swing.JLabel();
        reportFirstNameLabel = new javax.swing.JLabel();
        reportEmployeeFName = new javax.swing.JTextField();
        employeeReportPane = new javax.swing.JScrollPane();
        employeeReportDisplay = new javax.swing.JTextArea();
        clearReportButton = new javax.swing.JButton();
        okReportButton = new javax.swing.JButton();
        empReportErrorLabel = new javax.swing.JLabel();
        reportLastNameLabel = new javax.swing.JLabel();
        reportEmployeeLName = new javax.swing.JTextField();
        addFoodPanel = new javax.swing.JPanel();
        addFoodLabel = new javax.swing.JLabel();
        addfoodNameLabel = new javax.swing.JLabel();
        addFoodName = new javax.swing.JTextField();
        addPriceLabel = new javax.swing.JLabel();
        addFoodPrice = new javax.swing.JTextField();
        addDescriptionLabel = new javax.swing.JLabel();
        foodDescriptionPane = new javax.swing.JScrollPane();
        addFoodDescription = new javax.swing.JTextArea();
        addTOCLabel = new javax.swing.JLabel();
        addTimeToCook = new javax.swing.JSpinner();
        addCategoryLabel = new javax.swing.JLabel();
        addCategory = new javax.swing.JComboBox();
        clearAddFoodButton = new javax.swing.JButton();
        okAddFoodButton = new javax.swing.JButton();
        foodInfoPane = new javax.swing.JScrollPane();
        addFoodInfo = new javax.swing.JTextArea();
        addFoodErrorLabel = new javax.swing.JLabel();
        editFoodPanel = new javax.swing.JPanel();
        editFoodLabel = new javax.swing.JLabel();
        editFoodNameLabel = new javax.swing.JLabel();
        clearEditFoodButton = new javax.swing.JButton();
        editCategory = new javax.swing.JComboBox();
        editPriceLabel = new javax.swing.JLabel();
        editCategoryLabel = new javax.swing.JLabel();
        editFoodName = new javax.swing.JTextField();
        foodInfoPane1 = new javax.swing.JScrollPane();
        editFoodInfo = new javax.swing.JTextArea();
        editFoodErrorLabel = new javax.swing.JLabel();
        editFoodPrice = new javax.swing.JTextField();
        okEditFoodButton = new javax.swing.JButton();
        editDescriptionLabel = new javax.swing.JLabel();
        editfoodDescriptionPane = new javax.swing.JScrollPane();
        editFoodDescription = new javax.swing.JTextArea();
        editTimeCookLabel = new javax.swing.JLabel();
        editTimeToCook = new javax.swing.JSpinner();
        editButton = new javax.swing.JButton();
        availabilityLabel = new javax.swing.JLabel();
        availability = new javax.swing.JComboBox();
        removeFoodPanel = new javax.swing.JPanel();
        removeFoodLabel = new javax.swing.JLabel();
        removeFoodNameLabel = new javax.swing.JLabel();
        removeFoodName = new javax.swing.JTextField();
        removeFoodInfoPane = new javax.swing.JScrollPane();
        removeFoodInfo = new javax.swing.JTextArea();
        clearRemoveFoodButton = new javax.swing.JButton();
        okRemoveFoodButton = new javax.swing.JButton();
        removeFoodErrorLabel = new javax.swing.JLabel();
        foodReportPanel = new javax.swing.JPanel();
        frLabel = new javax.swing.JLabel();
        foodNameLabel = new javax.swing.JLabel();
        intervalLabel = new javax.swing.JLabel();
        reportFoodName = new javax.swing.JTextField();
        timeInterval = new javax.swing.JTextField();
        foodReportPane = new javax.swing.JScrollPane();
        foodReportDisplay = new javax.swing.JTextArea();
        okFoodReportButton = new javax.swing.JButton();
        clearFoodReportButton = new javax.swing.JButton();
        foodReportErrorLabel = new javax.swing.JLabel();
        addEmpPanel = new javax.swing.JPanel();
        addEMPLabel = new javax.swing.JLabel();
        addFirstNameLabel = new javax.swing.JLabel();
        addEmployeeFName = new javax.swing.JTextField();
        addLastNameLabel = new javax.swing.JLabel();
        addEmployeeLName = new javax.swing.JTextField();
        usernameLabel = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        password = new javax.swing.JTextField();
        positionLabel = new javax.swing.JLabel();
        positionChoice = new javax.swing.JComboBox();
        okAddEmpButton = new javax.swing.JButton();
        clearAddEmpButton = new javax.swing.JButton();
        addEmployeePane = new javax.swing.JScrollPane();
        addEmployeeInfo = new javax.swing.JTextArea();
        addEmpErrorLabel = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(1366, 1024));
        setMinimumSize(new java.awt.Dimension(1366, 1024));
        setName("Form"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1366, 1024));

        managerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(restaurant.RestaurantApp.class).getContext().getResourceMap(managerPanel.class);
        managerLabel.setText(resourceMap.getString("managerLabel.text")); // NOI18N
        managerLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        managerLabel.setName("managerLabel"); // NOI18N
        managerLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                managerLabelMousePressed(evt);
            }
        });

        logoutButton.setText(resourceMap.getString("logoutButton.text")); // NOI18N
        logoutButton.setMinimumSize(new java.awt.Dimension(40, 23));
        logoutButton.setName("logoutButton"); // NOI18N
        logoutButton.setPreferredSize(new java.awt.Dimension(40, 23));

        managerTabPane.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        managerTabPane.setForeground(resourceMap.getColor("managerTabbedPane.foreground")); // NOI18N
        managerTabPane.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        managerTabPane.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        managerTabPane.setMaximumSize(new java.awt.Dimension(727, 552));
        managerTabPane.setMinimumSize(new java.awt.Dimension(727, 552));
        managerTabPane.setName("managerTabbedPane"); // NOI18N

        removeEmpPanel.setMaximumSize(new java.awt.Dimension(727, 552));
        removeEmpPanel.setMinimumSize(new java.awt.Dimension(727, 552));
        removeEmpPanel.setName("removeEmpPanel"); // NOI18N
        removeEmpPanel.setPreferredSize(new java.awt.Dimension(727, 552));

        removeEmpLabel.setText(resourceMap.getString("removeEmpLabel.text")); // NOI18N
        removeEmpLabel.setName("removeEmpLabel"); // NOI18N

        removeFirstNameLabel.setText(resourceMap.getString("removeFirstNameLabel.text")); // NOI18N
        removeFirstNameLabel.setName("removeFirstNameLabel"); // NOI18N

        removeEmployeeFName.setText(resourceMap.getString("removeEmployeeFName.text")); // NOI18N
        removeEmployeeFName.setName("removeEmployeeFName"); // NOI18N

        removeLastNameLabel.setText(resourceMap.getString("removeLastNameLabel.text")); // NOI18N
        removeLastNameLabel.setName("removeLastNameLabel"); // NOI18N

        removeEmployeeLName.setText(resourceMap.getString("removeEmployeeLName.text")); // NOI18N
        removeEmployeeLName.setName("removeEmployeeLName"); // NOI18N

        removeEmployeePane.setName("removeEmployeePane"); // NOI18N

        removeEmployeeInfo.setColumns(20);
        removeEmployeeInfo.setRows(5);
        removeEmployeeInfo.setName("removeEmployeeInfo"); // NOI18N
        removeEmployeePane.setViewportView(removeEmployeeInfo);

        clearRemoveEmpButton.setText(resourceMap.getString("clearRemoveEmpButton.text")); // NOI18N
        clearRemoveEmpButton.setName("clearRemoveEmpButton"); // NOI18N
        clearRemoveEmpButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearRemoveEmpButtonMouseClicked(evt);
            }
        });

        okRemoveEmpButton.setText(resourceMap.getString("okRemoveEmpButton.text")); // NOI18N
        okRemoveEmpButton.setName("okRemoveEmpButton"); // NOI18N
        okRemoveEmpButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                okRemoveEmpButtonMouseClicked(evt);
            }
        });

        removeEmpErrorLabel.setForeground(resourceMap.getColor("removeEmpErrorLabel.foreground")); // NOI18N
        removeEmpErrorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        removeEmpErrorLabel.setText(resourceMap.getString("removeEmpErrorLabel.text")); // NOI18N
        removeEmpErrorLabel.setName("removeEmpErrorLabel"); // NOI18N

        javax.swing.GroupLayout removeEmpPanelLayout = new javax.swing.GroupLayout(removeEmpPanel);
        removeEmpPanel.setLayout(removeEmpPanelLayout);
        removeEmpPanelLayout.setHorizontalGroup(
            removeEmpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(removeEmpPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(removeEmpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, removeEmpPanelLayout.createSequentialGroup()
                        .addComponent(removeEmpLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(407, 407, 407))
                    .addGroup(removeEmpPanelLayout.createSequentialGroup()
                        .addGroup(removeEmpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(removeEmpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(removeEmployeeFName, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(removeFirstNameLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(removeEmpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(removeEmployeeLName, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(removeLastNameLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(removeEmpPanelLayout.createSequentialGroup()
                                .addComponent(clearRemoveEmpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(okRemoveEmpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(removeEmpErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 587, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeEmployeePane, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        removeEmpPanelLayout.setVerticalGroup(
            removeEmpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(removeEmpPanelLayout.createSequentialGroup()
                .addComponent(removeEmpLabel)
                .addGap(37, 37, 37)
                .addGroup(removeEmpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(removeEmpPanelLayout.createSequentialGroup()
                        .addComponent(removeFirstNameLabel)
                        .addGap(18, 18, 18)
                        .addComponent(removeEmployeeFName, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(removeLastNameLabel)
                        .addGap(18, 18, 18)
                        .addComponent(removeEmployeeLName, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 259, Short.MAX_VALUE)
                        .addComponent(removeEmpErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addGroup(removeEmpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clearRemoveEmpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(okRemoveEmpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(removeEmployeePane, javax.swing.GroupLayout.DEFAULT_SIZE, 539, Short.MAX_VALUE))
                .addContainerGap())
        );

        managerTabPane.addTab(resourceMap.getString("removeEmpPanel.TabConstraints.tabTitle"), removeEmpPanel); // NOI18N

        employeeReportPanel.setMaximumSize(new java.awt.Dimension(727, 552));
        employeeReportPanel.setMinimumSize(new java.awt.Dimension(727, 552));
        employeeReportPanel.setName("employeeReportPanel"); // NOI18N
        employeeReportPanel.setPreferredSize(new java.awt.Dimension(727, 552));

        erLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        erLabel.setText(resourceMap.getString("erLabel.text")); // NOI18N
        erLabel.setName("erLabel"); // NOI18N

        reportFirstNameLabel.setText(resourceMap.getString("reportFirstNameLabel.text")); // NOI18N
        reportFirstNameLabel.setName("reportFirstNameLabel"); // NOI18N

        reportEmployeeFName.setText(resourceMap.getString("reportEmployeeFName.text")); // NOI18N
        reportEmployeeFName.setName("reportEmployeeFName"); // NOI18N

        employeeReportPane.setName("employeeReportPane"); // NOI18N

        employeeReportDisplay.setColumns(20);
        employeeReportDisplay.setRows(5);
        employeeReportDisplay.setName("employeeReportDisplay"); // NOI18N
        employeeReportPane.setViewportView(employeeReportDisplay);

        clearReportButton.setText(resourceMap.getString("clearReportButton.text")); // NOI18N
        clearReportButton.setName("clearReportButton"); // NOI18N
        clearReportButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearReportButtonMouseClicked(evt);
            }
        });

        okReportButton.setText(resourceMap.getString("okReportButton.text")); // NOI18N
        okReportButton.setName("okReportButton"); // NOI18N
        okReportButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                okReportButtonMouseClicked(evt);
            }
        });

        empReportErrorLabel.setForeground(resourceMap.getColor("empReportErrorLabel.foreground")); // NOI18N
        empReportErrorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        empReportErrorLabel.setText(resourceMap.getString("empReportErrorLabel.text")); // NOI18N
        empReportErrorLabel.setName("empReportErrorLabel"); // NOI18N

        reportLastNameLabel.setText(resourceMap.getString("reportLastNameLabel.text")); // NOI18N
        reportLastNameLabel.setName("reportLastNameLabel"); // NOI18N

        reportEmployeeLName.setText(resourceMap.getString("reportEmployeeLName.text")); // NOI18N
        reportEmployeeLName.setName("reportEmployeeLName"); // NOI18N

        javax.swing.GroupLayout employeeReportPanelLayout = new javax.swing.GroupLayout(employeeReportPanel);
        employeeReportPanel.setLayout(employeeReportPanelLayout);
        employeeReportPanelLayout.setHorizontalGroup(
            employeeReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(employeeReportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(employeeReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(employeeReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(reportEmployeeFName)
                        .addComponent(reportFirstNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                        .addComponent(reportEmployeeLName, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(reportLastNameLabel)
                    .addGroup(employeeReportPanelLayout.createSequentialGroup()
                        .addComponent(clearReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(okReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(empReportErrorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(employeeReportPane, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(erLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1112, Short.MAX_VALUE)
        );
        employeeReportPanelLayout.setVerticalGroup(
            employeeReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(employeeReportPanelLayout.createSequentialGroup()
                .addComponent(erLabel)
                .addGap(57, 57, 57)
                .addGroup(employeeReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(employeeReportPanelLayout.createSequentialGroup()
                        .addComponent(reportFirstNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reportEmployeeFName, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(reportLastNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reportEmployeeLName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 265, Short.MAX_VALUE)
                        .addComponent(empReportErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(employeeReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clearReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(okReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(employeeReportPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE))
                .addContainerGap())
        );

        managerTabPane.addTab(resourceMap.getString("employeeReportPanel.TabConstraints.tabTitle"), employeeReportPanel); // NOI18N

        addFoodPanel.setName("addFoodPanel"); // NOI18N

        addFoodLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addFoodLabel.setText(resourceMap.getString("addFoodLabel.text")); // NOI18N
        addFoodLabel.setName("addFoodLabel"); // NOI18N

        addfoodNameLabel.setText(resourceMap.getString("addfoodNameLabel.text")); // NOI18N
        addfoodNameLabel.setName("addfoodNameLabel"); // NOI18N

        addFoodName.setText(resourceMap.getString("addFoodName.text")); // NOI18N
        addFoodName.setName("addFoodName"); // NOI18N

        addPriceLabel.setText(resourceMap.getString("addPriceLabel.text")); // NOI18N
        addPriceLabel.setName("addPriceLabel"); // NOI18N

        addFoodPrice.setText(resourceMap.getString("addFoodPrice.text")); // NOI18N
        addFoodPrice.setName("addFoodPrice"); // NOI18N

        addDescriptionLabel.setText(resourceMap.getString("addDescriptionLabel.text")); // NOI18N
        addDescriptionLabel.setName("addDescriptionLabel"); // NOI18N

        foodDescriptionPane.setName("foodDescriptionPane"); // NOI18N

        addFoodDescription.setColumns(20);
        addFoodDescription.setRows(5);
        addFoodDescription.setName("addFoodDescription"); // NOI18N
        foodDescriptionPane.setViewportView(addFoodDescription);

        addTOCLabel.setText(resourceMap.getString("addTOCLabel.text")); // NOI18N
        addTOCLabel.setName("addTOCLabel"); // NOI18N

        addTimeToCook.setName("addTimeToCook"); // NOI18N

        addCategoryLabel.setText(resourceMap.getString("addCategoryLabel.text")); // NOI18N
        addCategoryLabel.setName("addCategoryLabel"); // NOI18N

        addCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Appetizer", "Entree", "Dessert" }));
        addCategory.setName("addCategory"); // NOI18N

        clearAddFoodButton.setText(resourceMap.getString("clearAddFoodButton.text")); // NOI18N
        clearAddFoodButton.setName("clearAddFoodButton"); // NOI18N
        clearAddFoodButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearAddFoodButtonMouseClicked(evt);
            }
        });

        okAddFoodButton.setText(resourceMap.getString("okAddFoodButton.text")); // NOI18N
        okAddFoodButton.setName("okAddFoodButton"); // NOI18N
        okAddFoodButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                okAddFoodButtonMouseClicked(evt);
            }
        });

        foodInfoPane.setName("foodInfoPane"); // NOI18N

        addFoodInfo.setColumns(20);
        addFoodInfo.setRows(5);
        addFoodInfo.setName("addFoodInfo"); // NOI18N
        foodInfoPane.setViewportView(addFoodInfo);

        addFoodErrorLabel.setForeground(resourceMap.getColor("addFoodErrorLabel.foreground")); // NOI18N
        addFoodErrorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addFoodErrorLabel.setText(resourceMap.getString("addFoodErrorLabel.text")); // NOI18N
        addFoodErrorLabel.setName("addFoodErrorLabel"); // NOI18N

        javax.swing.GroupLayout addFoodPanelLayout = new javax.swing.GroupLayout(addFoodPanel);
        addFoodPanel.setLayout(addFoodPanelLayout);
        addFoodPanelLayout.setHorizontalGroup(
            addFoodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addFoodPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addFoodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addFoodPanelLayout.createSequentialGroup()
                        .addComponent(addfoodNameLabel)
                        .addContainerGap(959, Short.MAX_VALUE))
                    .addGroup(addFoodPanelLayout.createSequentialGroup()
                        .addGroup(addFoodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addFoodPanelLayout.createSequentialGroup()
                                .addComponent(clearAddFoodButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(54, 54, 54)
                                .addComponent(okAddFoodButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(addFoodErrorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 667, Short.MAX_VALUE)
                            .addGroup(addFoodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addFoodPanelLayout.createSequentialGroup()
                                    .addComponent(addCategoryLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(addCategory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(addFoodName, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(addFoodPrice, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(foodDescriptionPane, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addFoodPanelLayout.createSequentialGroup()
                                    .addComponent(addTOCLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(addTimeToCook))
                                .addComponent(addDescriptionLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(addPriceLabel, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(foodInfoPane, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addComponent(addFoodLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1102, Short.MAX_VALUE)))
        );
        addFoodPanelLayout.setVerticalGroup(
            addFoodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addFoodPanelLayout.createSequentialGroup()
                .addComponent(addFoodLabel)
                .addGap(18, 18, 18)
                .addComponent(addfoodNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addFoodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addFoodPanelLayout.createSequentialGroup()
                        .addComponent(addFoodName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(addPriceLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addFoodPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(addDescriptionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(foodDescriptionPane, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(addFoodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addTOCLabel)
                            .addComponent(addTimeToCook, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(addFoodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addCategoryLabel)
                            .addComponent(addCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                        .addComponent(addFoodErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addFoodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clearAddFoodButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(okAddFoodButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(foodInfoPane, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE))
                .addContainerGap())
        );

        managerTabPane.addTab(resourceMap.getString("addFoodPanel.TabConstraints.tabTitle"), addFoodPanel); // NOI18N

        editFoodPanel.setName("editFoodPanel"); // NOI18N

        editFoodLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        editFoodLabel.setText(resourceMap.getString("editFoodLabel.text")); // NOI18N
        editFoodLabel.setName("editFoodLabel"); // NOI18N

        editFoodNameLabel.setText(resourceMap.getString("editFoodNameLabel.text")); // NOI18N
        editFoodNameLabel.setName("editFoodNameLabel"); // NOI18N

        clearEditFoodButton.setText(resourceMap.getString("clearEditFoodButton.text")); // NOI18N
        clearEditFoodButton.setName("clearEditFoodButton"); // NOI18N
        clearEditFoodButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearEditFoodButtonMouseClicked(evt);
            }
        });

        editCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Appetizer", "Entree", "Dessert" }));
        editCategory.setName("editCategory"); // NOI18N

        editPriceLabel.setText(resourceMap.getString("editPriceLabel.text")); // NOI18N
        editPriceLabel.setName("editPriceLabel"); // NOI18N

        editCategoryLabel.setText(resourceMap.getString("editCategoryLabel.text")); // NOI18N
        editCategoryLabel.setName("editCategoryLabel"); // NOI18N

        editFoodName.setName("editFoodName"); // NOI18N

        foodInfoPane1.setName("foodInfoPane1"); // NOI18N

        editFoodInfo.setColumns(20);
        editFoodInfo.setRows(5);
        editFoodInfo.setName("editFoodInfo"); // NOI18N
        foodInfoPane1.setViewportView(editFoodInfo);

        editFoodErrorLabel.setForeground(resourceMap.getColor("editFoodErrorLabel.foreground")); // NOI18N
        editFoodErrorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        editFoodErrorLabel.setName("editFoodErrorLabel"); // NOI18N

        editFoodPrice.setName("editFoodPrice"); // NOI18N

        okEditFoodButton.setText(resourceMap.getString("okEditFoodButton.text")); // NOI18N
        okEditFoodButton.setName("okEditFoodButton"); // NOI18N
        okEditFoodButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                okEditFoodButtonMouseClicked(evt);
            }
        });

        editDescriptionLabel.setText(resourceMap.getString("editDescriptionLabel.text")); // NOI18N
        editDescriptionLabel.setName("editDescriptionLabel"); // NOI18N

        editfoodDescriptionPane.setName("editfoodDescriptionPane"); // NOI18N

        editFoodDescription.setColumns(20);
        editFoodDescription.setRows(5);
        editFoodDescription.setName("editFoodDescription"); // NOI18N
        editfoodDescriptionPane.setViewportView(editFoodDescription);

        editTimeCookLabel.setText(resourceMap.getString("editTimeCookLabel.text")); // NOI18N
        editTimeCookLabel.setName("editTimeCookLabel"); // NOI18N

        editTimeToCook.setName("editTimeToCook"); // NOI18N

        editButton.setText(resourceMap.getString("editButton.text")); // NOI18N
        editButton.setName("editButton"); // NOI18N
        editButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editButtonMouseClicked(evt);
            }
        });

        availabilityLabel.setText(resourceMap.getString("availabilityLabel.text")); // NOI18N
        availabilityLabel.setName("availabilityLabel"); // NOI18N

        availability.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Yes", "No" }));
        availability.setName("availability"); // NOI18N

        javax.swing.GroupLayout editFoodPanelLayout = new javax.swing.GroupLayout(editFoodPanel);
        editFoodPanel.setLayout(editFoodPanelLayout);
        editFoodPanelLayout.setHorizontalGroup(
            editFoodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(editFoodLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 1112, Short.MAX_VALUE)
            .addGroup(editFoodPanelLayout.createSequentialGroup()
                .addGap(324, 324, 324)
                .addGroup(editFoodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(editFoodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(availabilityLabel)
                        .addComponent(availability, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 241, Short.MAX_VALUE)
                .addComponent(foodInfoPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(editFoodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(editFoodPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(editFoodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(editFoodNameLabel)
                        .addGroup(editFoodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, editFoodPanelLayout.createSequentialGroup()
                                .addComponent(editCategoryLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editCategory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(editFoodName, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editFoodPrice, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, editFoodPanelLayout.createSequentialGroup()
                                .addComponent(editTimeCookLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editTimeToCook))
                            .addComponent(editDescriptionLabel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editPriceLabel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editfoodDescriptionPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(editFoodPanelLayout.createSequentialGroup()
                            .addComponent(clearEditFoodButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(54, 54, 54)
                            .addComponent(okEditFoodButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(editFoodErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 668, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(434, Short.MAX_VALUE)))
        );
        editFoodPanelLayout.setVerticalGroup(
            editFoodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editFoodPanelLayout.createSequentialGroup()
                .addComponent(editFoodLabel)
                .addGap(27, 27, 27)
                .addGroup(editFoodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(editFoodPanelLayout.createSequentialGroup()
                        .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(294, 294, 294)
                        .addComponent(availabilityLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(availability, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(foodInfoPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(editFoodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(editFoodPanelLayout.createSequentialGroup()
                    .addGap(23, 23, 23)
                    .addComponent(editFoodNameLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(editFoodName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(editPriceLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(editFoodPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(editDescriptionLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(editfoodDescriptionPane, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addGroup(editFoodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(editTimeCookLabel)
                        .addComponent(editTimeToCook, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(editFoodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(editCategoryLabel)
                        .addComponent(editCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                    .addComponent(editFoodErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(editFoodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(clearEditFoodButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(okEditFoodButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(23, 23, 23)))
        );

        managerTabPane.addTab(resourceMap.getString("editFoodPanel.TabConstraints.tabTitle"), editFoodPanel); // NOI18N

        removeFoodPanel.setName("removeFoodPanel"); // NOI18N

        removeFoodLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        removeFoodLabel.setText(resourceMap.getString("removeFoodLabel.text")); // NOI18N
        removeFoodLabel.setName("removeFoodLabel"); // NOI18N

        removeFoodNameLabel.setText(resourceMap.getString("removeFoodNameLabel.text")); // NOI18N
        removeFoodNameLabel.setName("removeFoodNameLabel"); // NOI18N

        removeFoodName.setText(resourceMap.getString("removeFoodName.text")); // NOI18N
        removeFoodName.setName("removeFoodName"); // NOI18N

        removeFoodInfoPane.setName("removeFoodInfoPane"); // NOI18N

        removeFoodInfo.setColumns(20);
        removeFoodInfo.setRows(5);
        removeFoodInfo.setName("removeFoodInfo"); // NOI18N
        removeFoodInfoPane.setViewportView(removeFoodInfo);

        clearRemoveFoodButton.setText(resourceMap.getString("clearRemoveFoodButton.text")); // NOI18N
        clearRemoveFoodButton.setName("clearRemoveFoodButton"); // NOI18N
        clearRemoveFoodButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearRemoveFoodButtonMouseClicked(evt);
            }
        });

        okRemoveFoodButton.setText(resourceMap.getString("okRemoveFoodButton.text")); // NOI18N
        okRemoveFoodButton.setName("okRemoveFoodButton"); // NOI18N
        okRemoveFoodButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                okRemoveFoodButtonMouseClicked(evt);
            }
        });

        removeFoodErrorLabel.setForeground(resourceMap.getColor("removeFoodErrorLabel.foreground")); // NOI18N
        removeFoodErrorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        removeFoodErrorLabel.setText(resourceMap.getString("removeFoodErrorLabel.text")); // NOI18N
        removeFoodErrorLabel.setName("removeFoodErrorLabel"); // NOI18N

        javax.swing.GroupLayout removeFoodPanelLayout = new javax.swing.GroupLayout(removeFoodPanel);
        removeFoodPanel.setLayout(removeFoodPanelLayout);
        removeFoodPanelLayout.setHorizontalGroup(
            removeFoodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(removeFoodLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 1112, Short.MAX_VALUE)
            .addGroup(removeFoodPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(removeFoodNameLabel)
                .addContainerGap(866, Short.MAX_VALUE))
            .addGroup(removeFoodPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(removeFoodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(removeFoodName, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(removeFoodPanelLayout.createSequentialGroup()
                        .addComponent(clearRemoveFoodButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(okRemoveFoodButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(removeFoodErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 606, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(removeFoodInfoPane, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
                .addContainerGap())
        );
        removeFoodPanelLayout.setVerticalGroup(
            removeFoodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(removeFoodPanelLayout.createSequentialGroup()
                .addComponent(removeFoodLabel)
                .addGap(18, 18, 18)
                .addComponent(removeFoodNameLabel)
                .addGap(18, 18, 18)
                .addGroup(removeFoodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(removeFoodPanelLayout.createSequentialGroup()
                        .addComponent(removeFoodName, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 387, Short.MAX_VALUE)
                        .addComponent(removeFoodErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(removeFoodPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clearRemoveFoodButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(okRemoveFoodButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(removeFoodInfoPane, javax.swing.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE))
                .addContainerGap())
        );

        managerTabPane.addTab(resourceMap.getString("removeFoodPanel.TabConstraints.tabTitle"), removeFoodPanel); // NOI18N

        foodReportPanel.setMaximumSize(new java.awt.Dimension(727, 552));
        foodReportPanel.setMinimumSize(new java.awt.Dimension(727, 552));
        foodReportPanel.setName("foodReportPanel"); // NOI18N

        frLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        frLabel.setText(resourceMap.getString("frLabel.text")); // NOI18N
        frLabel.setName("frLabel"); // NOI18N

        foodNameLabel.setText(resourceMap.getString("foodNameLabel.text")); // NOI18N
        foodNameLabel.setName("foodNameLabel"); // NOI18N

        intervalLabel.setText(resourceMap.getString("intervalLabel.text")); // NOI18N
        intervalLabel.setName("intervalLabel"); // NOI18N

        reportFoodName.setText(resourceMap.getString("reportFoodName.text")); // NOI18N
        reportFoodName.setName("reportFoodName"); // NOI18N

        timeInterval.setText(resourceMap.getString("timeInterval.text")); // NOI18N
        timeInterval.setName("timeInterval"); // NOI18N

        foodReportPane.setName("foodReportPane"); // NOI18N

        foodReportDisplay.setColumns(20);
        foodReportDisplay.setRows(5);
        foodReportDisplay.setName("foodReportDisplay"); // NOI18N
        foodReportPane.setViewportView(foodReportDisplay);

        okFoodReportButton.setText(resourceMap.getString("okFoodReportButton.text")); // NOI18N
        okFoodReportButton.setName("okFoodReportButton"); // NOI18N
        okFoodReportButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                okFoodReportButtonMouseClicked(evt);
            }
        });

        clearFoodReportButton.setText(resourceMap.getString("clearFoodReportButton.text")); // NOI18N
        clearFoodReportButton.setName("clearFoodReportButton"); // NOI18N
        clearFoodReportButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearFoodReportButtonMouseClicked(evt);
            }
        });

        foodReportErrorLabel.setForeground(resourceMap.getColor("foodReportErrorLabel.foreground")); // NOI18N
        foodReportErrorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        foodReportErrorLabel.setText(resourceMap.getString("foodReportErrorLabel.text")); // NOI18N
        foodReportErrorLabel.setName("foodReportErrorLabel"); // NOI18N

        javax.swing.GroupLayout foodReportPanelLayout = new javax.swing.GroupLayout(foodReportPanel);
        foodReportPanel.setLayout(foodReportPanelLayout);
        foodReportPanelLayout.setHorizontalGroup(
            foodReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(foodReportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(foodReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(foodNameLabel)
                    .addComponent(intervalLabel)
                    .addGroup(foodReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(timeInterval, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(reportFoodName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE))
                    .addGroup(foodReportPanelLayout.createSequentialGroup()
                        .addComponent(clearFoodReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(okFoodReportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(foodReportErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addComponent(foodReportPane, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(frLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1112, Short.MAX_VALUE)
        );
        foodReportPanelLayout.setVerticalGroup(
            foodReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(foodReportPanelLayout.createSequentialGroup()
                .addComponent(frLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64)
                .addGroup(foodReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(foodReportPanelLayout.createSequentialGroup()
                        .addComponent(foodNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reportFoodName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(intervalLabel)
                        .addGap(18, 18, 18)
                        .addComponent(timeInterval, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(241, 241, 241)
                        .addComponent(foodReportErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(foodReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(okFoodReportButton, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                            .addComponent(clearFoodReportButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)))
                    .addComponent(foodReportPane, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE))
                .addContainerGap())
        );

        managerTabPane.addTab(resourceMap.getString("foodReportPanel.TabConstraints.tabTitle"), foodReportPanel); // NOI18N

        addEmpPanel.setMaximumSize(new java.awt.Dimension(727, 552));
        addEmpPanel.setMinimumSize(new java.awt.Dimension(727, 552));
        addEmpPanel.setName("addEmpPanel"); // NOI18N
        addEmpPanel.setPreferredSize(new java.awt.Dimension(727, 552));

        addEMPLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addEMPLabel.setText(resourceMap.getString("addEMPLabel.text")); // NOI18N
        addEMPLabel.setName("addEMPLabel"); // NOI18N

        addFirstNameLabel.setText(resourceMap.getString("addFirstNameLabel.text")); // NOI18N
        addFirstNameLabel.setName("addFirstNameLabel"); // NOI18N

        addEmployeeFName.setText(resourceMap.getString("addEmployeeFName.text")); // NOI18N
        addEmployeeFName.setName("addEmployeeFName"); // NOI18N

        addLastNameLabel.setText(resourceMap.getString("addLastNameLabel.text")); // NOI18N
        addLastNameLabel.setName("addLastNameLabel"); // NOI18N

        addEmployeeLName.setText(resourceMap.getString("addEmployeeLName.text")); // NOI18N
        addEmployeeLName.setName("addEmployeeLName"); // NOI18N

        usernameLabel.setText(resourceMap.getString("usernameLabel.text")); // NOI18N
        usernameLabel.setName("usernameLabel"); // NOI18N

        username.setText(resourceMap.getString("username.text")); // NOI18N
        username.setName("username"); // NOI18N

        passwordLabel.setText(resourceMap.getString("passwordLabel.text")); // NOI18N
        passwordLabel.setName("passwordLabel"); // NOI18N

        password.setText(resourceMap.getString("password.text")); // NOI18N
        password.setName("password"); // NOI18N

        positionLabel.setText(resourceMap.getString("positionLabel.text")); // NOI18N
        positionLabel.setName("positionLabel"); // NOI18N

        positionChoice.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Chef", "Waiter", "Manager" }));
        positionChoice.setName("positionChoice"); // NOI18N

        okAddEmpButton.setText(resourceMap.getString("okAddEmpButton.text")); // NOI18N
        okAddEmpButton.setName("okAddEmpButton"); // NOI18N
        okAddEmpButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                okAddEmpButtonMouseClicked(evt);
            }
        });

        clearAddEmpButton.setText(resourceMap.getString("clearAddEmpButton.text")); // NOI18N
        clearAddEmpButton.setName("clearAddEmpButton"); // NOI18N
        clearAddEmpButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearAddEmpButtonMouseClicked(evt);
            }
        });

        addEmployeePane.setName("addEmployeePane"); // NOI18N

        addEmployeeInfo.setColumns(20);
        addEmployeeInfo.setRows(5);
        addEmployeeInfo.setName("addEmployeeInfo"); // NOI18N
        addEmployeePane.setViewportView(addEmployeeInfo);

        addEmpErrorLabel.setForeground(resourceMap.getColor("addEmpErrorLabel.foreground")); // NOI18N
        addEmpErrorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addEmpErrorLabel.setText(resourceMap.getString("addEmpErrorLabel.text")); // NOI18N
        addEmpErrorLabel.setName("addEmpErrorLabel"); // NOI18N

        javax.swing.GroupLayout addEmpPanelLayout = new javax.swing.GroupLayout(addEmpPanel);
        addEmpPanel.setLayout(addEmpPanelLayout);
        addEmpPanelLayout.setHorizontalGroup(
            addEmpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(addEMPLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 1112, Short.MAX_VALUE)
            .addGroup(addEmpPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addEmpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(usernameLabel, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(password, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addEmpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(positionChoice, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(positionLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(passwordLabel, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addEmpPanelLayout.createSequentialGroup()
                        .addComponent(clearAddEmpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(okAddEmpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(addFirstNameLabel, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addLastNameLabel, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addEmpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(username, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(addEmployeeLName, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(addEmployeeFName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE))
                    .addComponent(addEmpErrorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 598, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addEmployeePane, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        addEmpPanelLayout.setVerticalGroup(
            addEmpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addEmpPanelLayout.createSequentialGroup()
                .addComponent(addEMPLabel)
                .addGap(47, 47, 47)
                .addGroup(addEmpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addEmpPanelLayout.createSequentialGroup()
                        .addComponent(addFirstNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addEmployeeFName, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(addLastNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addEmployeeLName, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(usernameLabel)
                        .addGap(18, 18, 18)
                        .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(passwordLabel)
                        .addGap(18, 18, 18)
                        .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(positionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(positionChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                        .addComponent(addEmpErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(addEmpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(clearAddEmpButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(okAddEmpButton, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)))
                    .addComponent(addEmployeePane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE))
                .addContainerGap())
        );

        managerTabPane.addTab(resourceMap.getString("addEmpPanel.TabConstraints.tabTitle"), addEmpPanel); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(managerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 1366, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(managerTabPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1226, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(130, 130, 130))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(managerLabel)
                .addGap(89, 89, 89)
                .addComponent(managerTabPane, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(237, 237, 237))
        );

        managerTabPane.getAccessibleContext().setAccessibleName(resourceMap.getString("managerTabbedPane.AccessibleContext.accessibleName")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void clearFoodReportButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearFoodReportButtonMouseClicked
        clear();
    }//GEN-LAST:event_clearFoodReportButtonMouseClicked

    private void clearReportButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearReportButtonMouseClicked
        clear();
    }//GEN-LAST:event_clearReportButtonMouseClicked

    private void okReportButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okReportButtonMouseClicked
        displayEmployeeInfo();
    }//GEN-LAST:event_okReportButtonMouseClicked

    private void okFoodReportButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okFoodReportButtonMouseClicked
        displayFoodInfo();
    }//GEN-LAST:event_okFoodReportButtonMouseClicked

    private void okAddEmpButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okAddEmpButtonMouseClicked
        addEmployee();
    }//GEN-LAST:event_okAddEmpButtonMouseClicked

    private void clearAddEmpButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearAddEmpButtonMouseClicked
        clear();
    }//GEN-LAST:event_clearAddEmpButtonMouseClicked

    private void clearRemoveEmpButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearRemoveEmpButtonMouseClicked
        clear();
    }//GEN-LAST:event_clearRemoveEmpButtonMouseClicked

    private void clearAddFoodButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearAddFoodButtonMouseClicked
        clear();
    }//GEN-LAST:event_clearAddFoodButtonMouseClicked

    private void clearEditFoodButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearEditFoodButtonMouseClicked
        clear();
    }//GEN-LAST:event_clearEditFoodButtonMouseClicked

    private void clearRemoveFoodButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearRemoveFoodButtonMouseClicked
        clear();
    }//GEN-LAST:event_clearRemoveFoodButtonMouseClicked

    private void okRemoveEmpButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okRemoveEmpButtonMouseClicked
        removeEmployee();
    }//GEN-LAST:event_okRemoveEmpButtonMouseClicked

    private void okAddFoodButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okAddFoodButtonMouseClicked
        addItemToMenu();
    }//GEN-LAST:event_okAddFoodButtonMouseClicked

    private void editButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editButtonMouseClicked
        editFoodItem();
    }//GEN-LAST:event_editButtonMouseClicked

    private void okEditFoodButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okEditFoodButtonMouseClicked
        updateFoodItem();
    }//GEN-LAST:event_okEditFoodButtonMouseClicked

    private void okRemoveFoodButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okRemoveFoodButtonMouseClicked
        removeMenuItem();
    }//GEN-LAST:event_okRemoveFoodButtonMouseClicked

    private void managerLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_managerLabelMousePressed
        // the following this a proft of concept:
//        String message = "Please Wait";
//        JOptionPane.showMessageDialog(null, message);
//        String[] ab = new String[1];
//        org.jdesktop.application.Application.launch(database.DatabaseApp.class, ab);
////        JOptionPane.showMessageDialog(null, message);
////        org.jdesktop.application.Application.launch(food.FoodApp.class, ab);
    }//GEN-LAST:event_managerLabelMousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JComboBox addCategory;
    public static javax.swing.JLabel addCategoryLabel;
    public static javax.swing.JLabel addDescriptionLabel;
    public static javax.swing.JLabel addEMPLabel;
    public static javax.swing.JLabel addEmpErrorLabel;
    public static javax.swing.JPanel addEmpPanel;
    public static javax.swing.JTextField addEmployeeFName;
    public static javax.swing.JTextArea addEmployeeInfo;
    public static javax.swing.JTextField addEmployeeLName;
    public static javax.swing.JScrollPane addEmployeePane;
    public static javax.swing.JLabel addFirstNameLabel;
    public static javax.swing.JTextArea addFoodDescription;
    public static javax.swing.JLabel addFoodErrorLabel;
    public static javax.swing.JTextArea addFoodInfo;
    public static javax.swing.JLabel addFoodLabel;
    public static javax.swing.JTextField addFoodName;
    public static javax.swing.JPanel addFoodPanel;
    public static javax.swing.JTextField addFoodPrice;
    public static javax.swing.JLabel addLastNameLabel;
    public static javax.swing.JLabel addPriceLabel;
    public static javax.swing.JLabel addTOCLabel;
    public static javax.swing.JSpinner addTimeToCook;
    public static javax.swing.JLabel addfoodNameLabel;
    public static javax.swing.JComboBox availability;
    public static javax.swing.JLabel availabilityLabel;
    public static javax.swing.JButton clearAddEmpButton;
    public static javax.swing.JButton clearAddFoodButton;
    public static javax.swing.JButton clearEditFoodButton;
    public static javax.swing.JButton clearFoodReportButton;
    public static javax.swing.JButton clearRemoveEmpButton;
    public static javax.swing.JButton clearRemoveFoodButton;
    public static javax.swing.JButton clearReportButton;
    public static javax.swing.JButton editButton;
    public static javax.swing.JComboBox editCategory;
    public static javax.swing.JLabel editCategoryLabel;
    public static javax.swing.JLabel editDescriptionLabel;
    public static javax.swing.JTextArea editFoodDescription;
    public static javax.swing.JLabel editFoodErrorLabel;
    public static javax.swing.JTextArea editFoodInfo;
    public static javax.swing.JLabel editFoodLabel;
    public static javax.swing.JTextField editFoodName;
    public static javax.swing.JLabel editFoodNameLabel;
    public static javax.swing.JPanel editFoodPanel;
    public static javax.swing.JTextField editFoodPrice;
    public static javax.swing.JLabel editPriceLabel;
    public static javax.swing.JLabel editTimeCookLabel;
    public static javax.swing.JSpinner editTimeToCook;
    public static javax.swing.JScrollPane editfoodDescriptionPane;
    public static javax.swing.JLabel empReportErrorLabel;
    public static javax.swing.JTextArea employeeReportDisplay;
    public static javax.swing.JScrollPane employeeReportPane;
    public static javax.swing.JPanel employeeReportPanel;
    public static javax.swing.JLabel erLabel;
    public static javax.swing.JScrollPane foodDescriptionPane;
    public static javax.swing.JScrollPane foodInfoPane;
    public static javax.swing.JScrollPane foodInfoPane1;
    public static javax.swing.JLabel foodNameLabel;
    public static javax.swing.JTextArea foodReportDisplay;
    public static javax.swing.JLabel foodReportErrorLabel;
    public static javax.swing.JScrollPane foodReportPane;
    public static javax.swing.JPanel foodReportPanel;
    public static javax.swing.JLabel frLabel;
    public static javax.swing.JLabel intervalLabel;
    public static javax.swing.JButton logoutButton;
    public static javax.swing.JLabel managerLabel;
    public static javax.swing.JTabbedPane managerTabPane;
    public static javax.swing.JButton okAddEmpButton;
    public static javax.swing.JButton okAddFoodButton;
    public static javax.swing.JButton okEditFoodButton;
    public static javax.swing.JButton okFoodReportButton;
    public static javax.swing.JButton okRemoveEmpButton;
    public static javax.swing.JButton okRemoveFoodButton;
    public static javax.swing.JButton okReportButton;
    public static javax.swing.JTextField password;
    public static javax.swing.JLabel passwordLabel;
    public static javax.swing.JComboBox positionChoice;
    public static javax.swing.JLabel positionLabel;
    public static javax.swing.JLabel removeEmpErrorLabel;
    public static javax.swing.JLabel removeEmpLabel;
    public static javax.swing.JPanel removeEmpPanel;
    public static javax.swing.JTextField removeEmployeeFName;
    public static javax.swing.JTextArea removeEmployeeInfo;
    public static javax.swing.JTextField removeEmployeeLName;
    public static javax.swing.JScrollPane removeEmployeePane;
    public static javax.swing.JLabel removeFirstNameLabel;
    public static javax.swing.JLabel removeFoodErrorLabel;
    public static javax.swing.JTextArea removeFoodInfo;
    public static javax.swing.JScrollPane removeFoodInfoPane;
    public static javax.swing.JLabel removeFoodLabel;
    public static javax.swing.JTextField removeFoodName;
    public static javax.swing.JLabel removeFoodNameLabel;
    public static javax.swing.JPanel removeFoodPanel;
    public static javax.swing.JLabel removeLastNameLabel;
    public static javax.swing.JTextField reportEmployeeFName;
    public static javax.swing.JTextField reportEmployeeLName;
    public static javax.swing.JLabel reportFirstNameLabel;
    public static javax.swing.JTextField reportFoodName;
    public static javax.swing.JLabel reportLastNameLabel;
    public static javax.swing.JTextField timeInterval;
    public static javax.swing.JTextField username;
    public static javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables

    public void displayEmployeeInfo()
    {
        String fName = "", lName = "", position = "", itemDelivered = "", itemCooked = "";

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(restaurant.RestaurantApp.class).getContext().getResourceMap(managerPanel.class);
        String firstName = reportEmployeeFName.getText();
        String lastName = reportEmployeeLName.getText();
       
        if(firstName.equals("") || lastName.equals(""))
            empReportErrorLabel.setText("Employee name entered incorrectly. Please try agian.");
        else
        {
            try
            {
                Statement auth = RestaurantView.databaseConnection.createStatement();
                ResultSet result =  auth.executeQuery("SELECT* FROM employee, employeeinfo WHERE employee.firstName = '" + firstName
                        + "' AND employee.lastName = '" + lastName +  "' AND employee.id = employeeinfo.id");

                while(result.next())
                {
                    fName = result.getString("firstName");
                    lName = result.getString("lastName");
                    position = result.getString("eposition");
                    itemDelivered = result.getString("itemDelivered");
                    itemCooked = result.getString("itemsCooked");
                }

                if(position.equalsIgnoreCase("manager"))
                {
                    String message = "\nEmployee Name: " + fName + " " + lName + "\nPosition: "
                                + position;
                    employeeReportDisplay.append(message);
                    empReportErrorLabel.setText("");
                }
                else
                {
                if(firstName.equalsIgnoreCase(fName) && lastName.equalsIgnoreCase(lName))
                {
                    if(position.equalsIgnoreCase("Waiter"))
                    {
                        String message = "\nEmployee Name: " + fName + " " + lName + "\nPosition: "
                                + position + "\nItems Delieverd: " + itemDelivered;
                        employeeReportDisplay.append(message);
                        empReportErrorLabel.setText("");
                    }
                    else
                    {
                        String message = "\nEmployee Name: " + fName + " " + lName + "\nPosition: "
                             + position + "\nItems Cooked: " + itemCooked;
                        employeeReportDisplay.append(message);
                        empReportErrorLabel.setText("");
                    }
                }
                else
                    empReportErrorLabel.setText("Employee does not exist.");
                }
            }
            catch(SQLException sqle)
            {
                System.out.println(sqle );
            }
        }
        reportEmployeeFName.setText("");
        reportEmployeeLName.setText("");
    }
    public void displayFoodInfo()
    {
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(restaurant.RestaurantApp.class).getContext().getResourceMap(managerPanel.class);
        String food = reportFoodName.getText(), time = "", temp = "";
        String[]word = food.split(" ");
        for(int i = 0; i<word.length;i++)
            temp = temp + word[i].substring(0, 1).toUpperCase() + word[i].substring(1).toLowerCase();
        int interval = Integer.parseInt(timeInterval.getText());

        if(food.equals("") || timeInterval.getText().equals(""))
            foodReportErrorLabel.setText("Invalid input.");
        else if(search(food) == false)
            foodReportErrorLabel.setText("Food item does not exist.");
        else
        {
            try
            {
                Statement auth = RestaurantView.databaseConnection.createStatement();
                ResultSet result =  auth.executeQuery("select* from menuitem, rating where menuitem.itemName = '" + food + "' and menuitem.menuId = rating.menuId");
                String fname = "";
                int numSold = 0, rate = 0;

                while(result.next())
                {
                    fname = result.getString("itemName");
                    numSold = Integer.parseInt(result.getString("numberSold"));
                    rate = Integer.parseInt(result.getString("rating"));
                    time = result.getString("time");
                }

                if(food.equalsIgnoreCase(fname))
                {
                    String message = "\nFood Name: " + fname + "\nNumber Sold: "
                            + numSold + "\nRating: " + rate + "\nTime Interval: "
                            + time + " days\n";
                    foodReportDisplay.append(message);
                    foodReportErrorLabel.setText("");
                }
            }
            catch(SQLException sqle)
            {
                System.out.println(sqle );
            }
        }
        reportFoodName.setText("");
        timeInterval.setText("");
    }
    public boolean search(String firstName, String lastName)
    {
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(restaurant.RestaurantApp.class).getContext().getResourceMap(login.class);
        boolean flag = false;
        try
        {
            Statement auth = RestaurantView.databaseConnection.createStatement();
            String h ="SELECT * FROM "+ resourceMap.getString("employeeTable") + " WHERE firstName = \"" + firstName
                    + "\" AND lastName = \"" + lastName + "\"";
            ResultSet result =  auth.executeQuery(h);
            System.out.print(h);
            String fName = "", lName = "";
            while(result.next())
            {
                fName = result.getString("firstName");
                lName = result.getString("lastName");
            }
            if(firstName.equalsIgnoreCase(fName) && lastName.equalsIgnoreCase(lName))
                flag = true;
            else
                flag = false;
        }
        catch(SQLException sqle)
        {
            System.out.println(sqle );
        }
        return flag;
    }
    public boolean search(String foodName)
    {
        boolean flag = false;
        try
        {
            Statement auth = RestaurantView.databaseConnection.createStatement();
            ResultSet result =  auth.executeQuery("SELECT* FROM menuitem WHERE itemName = '" + foodName +"'");
            String fName = "";
            while(result.next())
               fName = result.getString("itemName");

            if(foodName.equalsIgnoreCase(fName))
                flag = true;
            else
                flag = false;
        }
        catch(SQLException sqle)
        {
            System.out.println(sqle );
        }
        return flag;
    }
    public String passEncrypt(String pass)
    {
        try
        {
            MessageDigest m = MessageDigest.getInstance("MD5");
            m.update(pass.getBytes(),0,pass.length());
            pass = "" + new BigInteger(1,m.digest()).toString(16);   
        }
        catch(NoSuchAlgorithmException noae)
        {
            System.out.println(noae);
        }
        return pass;
    }
    public void clear()
    {
        addEmployeeFName.setText("");removeEmployeeFName.setText("");reportEmployeeFName.setText("");
        addEmployeeLName.setText("");removeEmployeeLName.setText("");reportEmployeeLName.setText("");
        username.setText("");password.setText("");
        addFoodName.setText("");editFoodName.setText("");removeFoodName.setText("");reportFoodName.setText("");
        addFoodPrice.setText("");editFoodPrice.setText("");
        addFoodDescription.setText("");editFoodDescription.setText("");
        timeInterval.setText("");addTimeToCook.setValue(0);editTimeToCook.setValue(0);
        editFoodName.setEditable(true); addTimeToCook.setValue(0);
    }
    public void addEmployee()
    {
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(restaurant.RestaurantApp.class).getContext().getResourceMap(managerPanel.class);
        boolean flag = false;
        int count = 0, id = 0;
        String firstName = addEmployeeFName.getText(), lastName = addEmployeeLName.getText(),userName = username.getText(),
                passWord = password.getText(), position = (String)positionChoice.getSelectedItem();
        firstName = firstName.substring(0,1).toUpperCase() + firstName.substring(1).toLowerCase();
        lastName = lastName.substring(0,1).toUpperCase() + lastName.substring(1).toLowerCase();
        String[] temp1 = firstName.split(" ");String[] temp2 = lastName.split(" ");

        if(addEmployeeFName.getText().equals("") || addEmployeeLName.getText().equals("") || username.getText().equals(""))
            addEmpErrorLabel.setText("First name, last name, and/or username is blank.");
        else if(temp1.length > 1 || temp2.length > 1)
            addEmpErrorLabel.setText("First and last name can only be a single word.");
        else if(passWord.length() <= 3)
            addEmpErrorLabel.setText("Password must be longer than 3 characters.");
        else if(search(firstName, lastName))
            addEmpErrorLabel.setText("Cannot add employee. Employee already exists.");
        else
        {
            try
            {
                Statement auth = RestaurantView.databaseConnection.createStatement();
                ResultSet result = auth.executeQuery("Select userName, eposition From " + resourceMap.getString("employeeTable"));
                while(result.next())
                {
                    if(position.equalsIgnoreCase(result.getString("eposition")))
                        count++;
                    if(userName.equalsIgnoreCase(result.getString("userName")))
                    {
                        flag = true;
                        addEmpErrorLabel.setText("Username already exists. Please choose a different one.");
                    }
                }

                if(count > 10)
                    addEmpErrorLabel.setText("The " + position + " is currently at max(10) and no more of this position can be added.");
                else if(flag == false)
                {
                    int row = auth.executeUpdate("insert into " + resourceMap.getString("employeeTable") + " values ("
                            + "NULL, '" + userName + "', '"+ passEncrypt(passWord) + "', '" + firstName + "', '"
                            + lastName + "', '" + position + "');");
                    addEmployeeInfo.setText("The following employee was added:\n" + "Name: " + firstName + " " + lastName + "\nUsername: "
                            + userName + "\nPassword: " + passWord + "\nPosition: " + position + "\n");
                    addEmpErrorLabel.setText("");
                    clear();
                    result = auth.executeQuery("Select id employee where userName = '"
                            + userName +"'");
                    while(result.next())
                        id = Integer.parseInt(result.getString("id"));
                    if(position.equalsIgnoreCase("Waiter"))
                        row = auth.executeUpdate("insert into employeeinfo values('" + id + "', '0', NULL);");
                    else if(position.equalsIgnoreCase("Chef"))
                        row = auth.executeUpdate("insert into employeeinfo values('" + id + "', NULL, '0');");
                    else
                        row = auth.executeUpdate("insert into employeeinfo values('" + id + "', NULL, NULL);");
                }
            }
            catch(SQLException sqle)
            {
            System.out.println(sqle );
            }
        }
    }
    public void removeEmployee()
    {
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(restaurant.RestaurantApp.class).getContext().getResourceMap(managerPanel.class);
        String firstName = removeEmployeeFName.getText(), lastName = removeEmployeeLName.getText();
        int id = 0;
        firstName = firstName.substring(0,1).toUpperCase() + firstName.substring(1).toLowerCase();
        lastName = lastName.substring(0,1).toUpperCase() + lastName.substring(1).toLowerCase();
        String[] temp1 = firstName.split(" ");String[] temp2 = lastName.split(" ");
        if(removeEmployeeFName.getText().equals("") || removeEmployeeLName.getText().equals(""))
            removeEmpErrorLabel.setText("First name and/or last name is blank.");
        else if(temp1.length > 1 || temp2.length > 1)
            removeEmpErrorLabel.setText("First and last name can only be a single word.");
        else if(search(firstName, lastName))
        {
            try
            {
                Statement auth = RestaurantView.databaseConnection.createStatement();
                ResultSet res = auth.executeQuery("Select * From employee, employeeinfo where firstName = '"+ firstName
                        + "' and lastName = '" + lastName +"' and employee.id = employeeinfo.id ");
                while(res.next())
                    id = Integer.parseInt(res.getString("id"));
                int result = auth.executeUpdate("delete from employeeinfo where id = '"+ id +"'");
                result =  auth.executeUpdate("delete from employee where id = '" + id +"'");
                        //+" where firstName = '"+ firstName + "' and lastName = '" + lastName +"' ");
                removeEmployeeInfo.setText(firstName + " " + lastName + " was removed.\n\n");
                removeEmpErrorLabel.setText("");clear();
            }
            catch(SQLException sqle)
            {
                System.out.println(sqle );
            }
        }
        else
            removeEmpErrorLabel.setText("Employee does not exist.");
    }
    public void addItemToMenu()
    {
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(restaurant.RestaurantApp.class).getContext().getResourceMap(managerPanel.class);
        String foodName = addFoodName.getText().replaceAll("\\s+", " "), description = addFoodDescription.getText().replaceAll("\\s+", " ")
                ,category = (String)addCategory.getSelectedItem(), foodPrice = addFoodPrice.getText(), temp = "";
        int timeToCook = (Integer)addTimeToCook.getValue();
        String[]word = foodName.split(" ");
        for(int i = 0; i<word.length;i++)
            temp = temp + word[i].substring(0, 1).toUpperCase() + word[i].substring(1).toLowerCase();
        if(addFoodName.getText().equals("") || addFoodPrice.getText().equals("") || addFoodDescription.getText().equals(""))
            addFoodErrorLabel.setText("Food name, price,and/or description is blank.");
        else if (search (foodName))
            addFoodErrorLabel.setText("Food item already exists.");
        else if(foodPrice.matches("((-|\\+)?[0-9]+(\\.[0-9]+)?)+") == false)
            addFoodErrorLabel.setText("Price must be entered as a number.");
        else
        {
            try
            {
                double price = Double.parseDouble(foodPrice);
                Statement auth = RestaurantView.databaseConnection.createStatement();
                int row = auth.executeUpdate("insert into menuitem values (NULL, '" + foodName
                        + "', '"+ price + "', '" + description + "', '" + timeToCook + "', '0', NULL, 1, '" + category + "');");
                addFoodInfo.setText("The following menu item was added:\n" + "Name: " + foodName+ "\nPrice: "
                            + price + "\nEsitmated time to cook: " + timeToCook + "\nCategory: " + category +
                            "\nDescription:"+ description +"\n");
                addFoodErrorLabel.setText("");
                clear();

            }
            catch(SQLException sqle)
            {
                System.out.println(sqle );
            }
        }
    }
    public void updateFoodItem()
    {
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(restaurant.RestaurantApp.class).getContext().getResourceMap(managerPanel.class);
        String foodName = editFoodName.getText().replaceAll("\\s+", " "), description = editFoodDescription.getText().replaceAll("\\s+", " "),
                available = (String)availability.getSelectedItem(),category = (String)editCategory.getSelectedItem(), foodPrice = editFoodPrice.getText();
        int timeToCook = (Integer)editTimeToCook.getValue(), availbyte = 0;;

        if(available.equals("Yes"))
            availbyte = 1;
        else
            availbyte = 0;

        if(editFoodPrice.getText().equals("") || editFoodDescription.getText().equals(""))
            editFoodErrorLabel.setText("Price and/or description is blank.");
        else if(foodPrice.matches("((-|\\+)?[0-9]+(\\.[0-9]+)?)+") == false)
            addFoodErrorLabel.setText("Price must be entered as a number.");
        else
        {
            try
            {
                double price = Double.parseDouble(foodPrice);
                Statement auth = RestaurantView.databaseConnection.createStatement();
                String foodUpdate = "Update menuitem set description = '" + description + "', category = '" + category
                        + "', timeToCook = '" + timeToCook+ "', price = '" + price + "', availablity = "
                        + availbyte + " where itemName = '" + foodName + "'";
                int rows = auth.executeUpdate(foodUpdate);
                editFoodInfo.setText("The following menu item was updated:\n" + "Name: " + foodName+ "\nPrice: "
                            + price + "\nEsitmated time to cook: " + timeToCook + "\nCategory: " + category +
                            "\nDescription:"+ description +"\n");
                if(availbyte == 1)
                    editFoodInfo.append("Now available.\n");
                else
                    editFoodInfo.append("Not available.\n");
                clear();
                editCategory.setEnabled(false); editFoodPrice.setEnabled(false); editFoodDescription.setEnabled(false);
                editTimeToCook.setEnabled(false);availability.setEnabled(false);

            }
            catch(SQLException sqle)
            {
                System.out.println(sqle );
            }
        }
    }
    public void editFoodItem()
    {
        String foodName = editFoodName.getText().replaceAll("\\s+", " "), temp = "";
        String description = "", category = "", timeToCook = "", price = "", available = "";
        String[]word = foodName.split(" ");
        for(int i = 0; i<word.length;i++)
            temp = temp + word[i].substring(0, 1).toUpperCase() + word[i].substring(1).toLowerCase();
        if(search(foodName) == false)
            editFoodErrorLabel.setText("Food item does not exist.");
        else if(editFoodName.getText().equals(""))
            editFoodErrorLabel.setText("Must enter a item name to edit it.");
        else
        {
            try
            {
                Statement auth = RestaurantView.databaseConnection.createStatement();
                ResultSet result =  auth.executeQuery("SELECT* FROM menuitem WHERE itemName = '" + foodName + "'");

                while(result.next())
                {
                    description = result.getString("description");
                    category = result.getString("category");
                    price = result.getString("price");
                    timeToCook = result.getString("timeToCook");
                    available = result.getString("availablity");
                }
                editFoodDescription.setText(description);
                editFoodPrice.setText(price);
                editCategory.setSelectedItem(category);
                editTimeToCook.setValue(Integer.parseInt(timeToCook));
                if(available.equals("1"))
                    availability.setSelectedItem("Yes");
                else
                    availability.setSelectedItem("No");
                editFoodName.setEditable(false);
                editCategory.setEnabled(true); editFoodPrice.setEnabled(true); editFoodDescription.setEnabled(true);
                editTimeToCook.setEnabled(true);availability.setEnabled(true);
            }
            catch(SQLException sqle)
            {
                System.out.println(sqle );
            }
        }
    }
    public void removeMenuItem()
    {
        String foodName = removeFoodName.getText().replaceAll("\\s+", " "), temp = "";
        String[]word = foodName.split(" ");
        for(int i = 0; i<word.length;i++)
            temp = temp + word[i].substring(0, 1).toUpperCase() + word[i].substring(1).toLowerCase();

        if(removeFoodName.getText().equals(""))
            removeFoodErrorLabel.setText("Food name is blank. Please enter a food name.");
        else if(search(foodName))
        {
            try
            {
                Statement auth = RestaurantView.databaseConnection.createStatement();
                int row = auth.executeUpdate("delete from menuitem where itemName = '" + foodName + "'");
                removeFoodInfo.setText(foodName + " was removed.\n");
                removeFoodErrorLabel.setText("");
                clear();
            }
            catch(SQLException sqle)
            {
                System.out.println(sqle );
            }
        }
        else
            removeFoodErrorLabel.setText("Food item does not exist.");

    }
}
